#!/usr/bin/env ruby
# This script plays a seasons passed as ARV[0] from a random offset
# If ARGV[0] is not given it reads from .active-season
`which mpv` ; raise "Install mpv (https://mpv.io/) to use this script" if $? != 0

require 'socket'
require 'optparse'

PLAYLIST = "eshd.m3u"
INPUTCONF = File.absolute_path(File.dirname(__FILE__)) + "/mpv-input.conf"

@options={}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [OPTIONS]"
  opts.on("--only-m3u", TrueClass, "Create the m3u and exit")
  opts.on("--stop-screensaver", TrueClass, "Prevent the screensaver from starting while play is running")
  opts.on("-d DIRECTORY", "--directory DIRECTORY" , String, "Path to dir to play")
end.parse!(into: @options)

@options[:"directory"] ||= File.dirname(__FILE__) + "/branches/" + File.read(File.dirname(__FILE__) + "/.active-season") + "/movies/"
frame_dir = @options[:"directory"]
season = File.basename(frame_dir)
Dir.chdir(frame_dir)

@parts = []
Dir.glob("electricsheep*.mp4").sort.each do |seq|
  seq1 = seq.split("_")[0]
  seq2 = seq.split("_")[1].sub(/\.mp4$/,"")
  seq = File.absolute_path(seq)
  if seq1 == seq2
    2.times { @parts << seq}
  else
    @parts << seq
  end
end

puts "Got #{@parts.count} parts"

OFFSET = rand(0..(@parts.count))

if @parts.count < 1
  fail "No enough completed parts - start the daemon to render some frames"
end
File.open(PLAYLIST, "w") { |f| f.write @parts.rotate(OFFSET).join("\n") }

exit if @options[:"only-m3u"]

mpv_args = %W(--input-conf="#{INPUTCONF}" --loop-playlist=inf --no-input-default-bindings #{(@options[:"stop-screensaver"] ? "--stop-screensaver" : "--no-stop-screensaver")} --no-osc -fs --panscan=1 --idle --quiet #{PLAYLIST})
mpv_args << "--wid #{ENV['XSCREENSAVER_WINDOW']}" if ENV['XSCREENSAVER_WINDOW']

mpv = Thread.new do
  begin
    Thread.current.abort_on_exception=true
    if Gem.win_platform?
      @pid = Process.spawn("mpv #{mpv_args.join(" ")}")
    else
      @pid = Process.spawn("mpv #{mpv_args.join(" ")}")
    end
    Process.wait(@pid)
  ensure
    Process.kill("KILL", @pid)
    Thread.current.kill
  end
end

Signal.trap("SIGTERM") { puts "SIGTERM" ; Process.kill("KILL", @pid) ; Thread.kill(mpv) ; exit }

Thread.new do
  loop do
    sleep 0.5
    unless mpv.status
      exit
    end
  end
end
mpv.join
